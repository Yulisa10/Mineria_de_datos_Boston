
import streamlit as st
import pickle
import gzip
import numpy as np
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.kernel_ridge import KernelRidge

# Funci√≥n para cargar el modelo
def load_model():
    try:
        with gzip.open('model_trained_regressor.pkl.gz', 'rb') as f:
            model = pickle.load(f)
        return model
    except Exception as e:
        st.error(f"Error al cargar el modelo: {e}")
        return None

# Funci√≥n principal
def main():
    # Personalizaci√≥n del t√≠tulo
    st.markdown("""
        <h1 style='text-align: center; color: #2E86C1;'>Predicci√≥n de Precios de Viviendas en Boston</h1>
    """, unsafe_allow_html=True)
    
    st.markdown("""
        <p style='text-align: center; font-size:18px; color: #5D6D7E;'>
        Introduce las caracter√≠sticas de la casa para obtener una estimaci√≥n de su precio.
        </p>
    """, unsafe_allow_html=True)
    
    # Imagen de una casa
    st.image("house.jpg", use_container_width=True, caption="Ejemplo de Vivienda")
    
    # Secci√≥n de entrada de datos con mejor visualizaci√≥n
    st.subheader("Caracter√≠sticas de la vivienda")
    
    crim = st.number_input("Tasa de criminalidad (CRIM)", min_value=0.0, format="%.4f")
    zn = st.number_input("Proporci√≥n de terreno residencial (ZN)", min_value=0.0, format="%.2f")
    indus = st.number_input("Proporci√≥n de acres de negocios (INDUS)", min_value=0.0, format="%.2f")
    chas = st.selectbox("L√≠mite con el r√≠o Charles (CHAS)", options=[0, 1], format_func=lambda x: "S√≠" if x == 1 else "No")
    nox = st.number_input("Concentraci√≥n de √≥xidos de nitr√≥geno (NOX)", min_value=0.0, format="%.4f")
    rm = st.number_input("N√∫mero promedio de habitaciones (RM)", min_value=0.0, format="%.2f")
    age = st.number_input("Porcentaje de unidades antiguas (AGE)", min_value=0.0, format="%.2f")
    dis = st.number_input("Distancia a centros de empleo (DIS)", min_value=0.0, format="%.2f")
    rad = st.number_input("√çndice de accesibilidad a autopistas (RAD)", min_value=0, format="%d")
    tax = st.number_input("Tasa de impuesto sobre la propiedad (TAX)", min_value=0, format="%d")
    ptratio = st.number_input("Proporci√≥n alumno-maestro (PTRATIO)", min_value=0.0, format="%.2f")
    b = st.number_input("√çndice de poblaci√≥n afroamericana (B)", min_value=0.0, format="%.2f")
    lstat = st.number_input("Porcentaje de poblaci√≥n de estatus bajo (LSTAT)", min_value=0.0, format="%.2f")
    
    # Bot√≥n de predicci√≥n con estilo
    if st.button("üîç Predecir Precio"):
        model = load_model()
        if model is not None:
            features = [[crim, zn, indus, chas, nox, rm, age, dis, rad, tax, ptratio, b, lstat]]
            prediction = model.predict(features)
            
            st.success(f"üí∞ El precio predicho de la casa es: ${prediction[0]:,.2f}")
            
            st.info("""
                **Hiperpar√°metros del mejor modelo:**
                - üîπ alpha: 0.1  
                - üîπ kernel: rbf
                
                **Evaluaci√≥n de Modelos:**
                - ElasticNet con StandardScaler -> MAE: 3.4372 | Par√°metros: {'reg__alpha': 0.1, 'reg__l1_ratio': 0.1}
                - KernelRidge con StandardScaler -> MAE: 2.6156 | Par√°metros: {'reg__alpha': 0.1, 'reg__kernel': 'rbf'} ‚úÖ
                - ElasticNet con MinMaxScaler -> MAE: 3.4694 | Par√°metros: {'reg__alpha': 0.1, 'reg__l1_ratio': 1.0}
                - KernelRidge con MinMaxScaler -> MAE: 2.8787 | Par√°metros: {'reg__alpha': 0.1, 'reg__kernel': 'poly'}
                - ElasticNet sin escalado -> MAE: 3.5148 | Par√°metros: {'reg__alpha': 0.1, 'reg__l1_ratio': 1.0}
                - KernelRidge sin escalado -> MAE: 3.5921 | Par√°metros: {'reg__alpha': 1.0, 'reg__kernel': 'linear'}
                
                **üìå Mejor Modelo:** KernelRidge con StandardScaler
                - Pipeline: StandardScaler + KernelRidge(alpha=0.1, kernel='rbf')
                - MAE m√°s bajo: 2.6156 üéØ
            """)
    
    # Pie de p√°gina con el nombre del creador
    st.markdown("""
        <hr>
        <p style='text-align: center; font-size:16px; color: #7D7D7D;'>
        P√°gina creada por <strong>Yulisa Ortiz Giraldo</strong>
        </p>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()

